@use 'sass:math';

/// @group Fabric Component Placeholders
/// @access public

%Grid {
	@extend %Grid-columns;
	@extend %Grid-gaps;
	@extend %Grid-wrap;

	> div {
		@extend %Grid-item;
	}
}

%Grid-wrap {
	--grid-columns: #{$grid-columns};
	box-sizing: border-box;
	display: flex;
	gap: var(--grid-gap);
	flex-wrap: wrap;
	width: 100%;
}

%Grid-item {
	--grid-item-width: 1;
	box-sizing: border-box;
	position: relative;
	flex-shrink: 0;
	width: calc(
		(var(--grid-item-width) * ((100% / var(--grid-columns)) - ((var(--grid-columns) - 1) / var(--grid-columns) * var(--grid-gap)))) +
		((var(--grid-item-width) - 1) * var(--grid-gap))
	);

	@for $i from $grid-columns through 1 {
		&.is-#{$i} {
			--grid-item-width: #{$i};
		}
	}
}

%Grid-columns {
	@for $i from $grid-columns through 1 {
		&.with-#{$i} {
			--grid-columns: #{$i};
		}
	}

	@each $_grid-breakpoint in map-keys($grid-breakpoints) {
		$_breakpoints: map-get($grid-breakpoints, $_grid-breakpoint);
		$_grid-class: '.has-#{camelize($_grid-breakpoint)}Breakpoints';

		@if length($_breakpoints) > 1 {
			$_breakpoints: list-reverse($_breakpoints);
		}

		@if $_grid-breakpoint == 'normal' {
			$_grid-class: '';
		}

		@for $i from 1 through length($_breakpoints) {
			$_breakpoint: nth($_breakpoints, $i);

			@if $i == 1 {
				@for $_columns from $grid-columns through 1 {
					&#{$_grid-class}.with-#{$_columns} {
						--grid-columns: #{$_columns};
					}
				}
			} @else {
				@include media('<#{$_breakpoint}') {
					@for $_columns from $grid-columns through 1 {
						&#{$_grid-class}.with-#{$_columns}--#{camelize($_breakpoint)} {
							--grid-columns: #{$_columns};
						}
					}
				}
			}
		}
	}
}

%Grid-gaps {
	@each $_grid-breakpoint in map-keys($grid-breakpoints) {
		$_breakpoints: map-get($grid-breakpoints, $_grid-breakpoint);

		@if length($_breakpoints) > 1 {
			$_breakpoints: list-reverse($_breakpoints);
		}

		@for $i from 1 through length($_breakpoints) {
			$_breakpoint: nth($_breakpoints, $i);

			@if $i == 1 {
				@each $gap in map-keys($grid-gaps) {
					&.has-#{camelize($gap)}Gaps {
						--grid-gap: var(--grid-gap-#{$gap});
					}
				}
			} @else {
				@include media('<#{$_breakpoint}') {
					@each $gap in map-keys($grid-gaps) {
						&.has-#{camelize($gap)}Gaps--#{camelize($_breakpoint)} {
							--grid-gap: var(--grid-gap-#{$gap});
						}
					}
				}
			}
		}
	}
}
