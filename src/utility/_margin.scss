@use "sass:map";

[class^="mb-"],
[class*=" mb-"] {
	margin-bottom: var(--mb) !important;
}

[class^="-mb-"],
[class*=" -mb-"] {
	margin-bottom: calc(var(--mb) * -1) !important;
}

[class^="ml-"],
[class*=" ml-"] {
	margin-left: var(--ml) !important;
}

[class^="-ml-"],
[class*=" -ml-"] {
	margin-left: calc(var(--ml) * -1) !important;
}

[class^="mr-"],
[class*=" mr-"] {
	margin-right: var(--mr) !important;
}

[class^="-mr-"],
[class*=" -mr-"] {
	margin-right: calc(var(--mr) * -1) !important;
}

[class^="mt-"],
[class*=" mt-"] {
	margin-top: var(--mt) !important;
}

[class^="-mt-"],
[class*=" -mt-"] {
	margin-top: calc(var(--mt) * -1) !important;
}

[class^="mx-"],
[class*=" mx-"] {
	margin-left: var(--ml) !important;
	margin-right: var(--mr) !important;
}

[class^="-mx-"],
[class*=" -mx-"] {
	margin-left: calc(var(--ml) * -1) !important;
	margin-right: calc(var(--mr) * -1) !important;
}

[class^="my-"],
[class*=" my-"] {
	margin-bottom: var(--mb) !important;
	margin-top: var(--mt) !important;
}

[class^="-my-"],
[class*=" -my-"] {
	margin-bottom: calc(var(--mb) * -1) !important;
	margin-top: calc(var(--mt) * -1) !important;
}

@each $key, $value in $spacing {
	.mb-#{camelize($key)},
	.-mb-#{camelize($key)} {
		@include responsive-property("--mb", $value);
	}

	.ml-#{camelize($key)},
	.-ml-#{camelize($key)} {
		@include responsive-property("--ml", $value);
	}

	.mr-#{camelize($key)},
	.-mr-#{camelize($key)} {
		@include responsive-property("--mr", $value);
	}

	.mt-#{camelize($key)},
	.-mt-#{camelize($key)} {
		@include responsive-property("--mt", $value);
	}
}

.mb-auto {
	--mb: auto;
}

.ml-auto {
	--ml: auto;
}

.mr-auto {
	--mr: auto;
}

.mt-auto {
	--mt: auto;
}

.mx-auto {
	--ml: auto;
	--mr: auto;
}

.my-auto {
	--mb: auto;
	--mt: auto;
}

@each $breakpoint in map-keys($breakpoints) {
	@include media('<#{$breakpoint}') {
		@each $key, $value in $spacing {
			.mb-#{camelize($key)}--#{camelize($breakpoint)},
			.-mb-#{camelize($key)}--#{camelize($breakpoint)} {
				@if type-of($value) == "map" {
					@include responsive-property("--mb", nth(map.values($value), 1));
				} @else {
					--mb: #{x-to-px($value)};
				}
			}

			.ml-#{camelize($key)}--#{camelize($breakpoint)},
			.-ml-#{camelize($key)}--#{camelize($breakpoint)} {
				@if type-of($value) == "map" {
					@include responsive-property("--ml", nth(map.values($value), 1));
				} @else {
					--ml: #{x-to-px($value)};
				}
			}

			.mr-#{camelize($key)}--#{camelize($breakpoint)},
			.-mr-#{camelize($key)}--#{camelize($breakpoint)} {
				@if type-of($value) == "map" {
					@include responsive-property("--mr", nth(map.values($value), 1));
				} @else {
					--mr: #{x-to-px($value)};
				}
			}

			.mt-#{camelize($key)}--#{camelize($breakpoint)},
			.-mt-#{camelize($key)}--#{camelize($breakpoint)} {
				@if type-of($value) == "map" {
					@include responsive-property("--mt", nth(map.values($value), 1));
				} @else {
					--mt: #{x-to-px($value)};
				}
			}
		}

		.mb-auto--#{camelize($breakpoint)} {
			--mb: auto;
		}

		.ml-auto--#{camelize($breakpoint)} {
			--ml: auto;
		}

		.mr-auto--#{camelize($breakpoint)} {
			--mr: auto;
		}

		.mt-auto--#{camelize($breakpoint)} {
			--mt: auto;
		}

		.mx-auto--#{camelize($breakpoint)} {
			--ml: auto;
			--mr: auto;
		}

		.my-auto--#{camelize($breakpoint)} {
			--mb: auto;
			--mt: auto;
		}
	}
}
