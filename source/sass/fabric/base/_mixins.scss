//---------------------------------------------------------------
// Sets font size relative to root em
//---------------------------------------------------------------

@mixin font-size($_size) {
	
	@if type-of($_size) == string and index(map-keys($font-size), $_size) {
		
		@if type-of(map-get($font-size, $_size)) == 'map' {
			
			$_stack: map-get($font-size, $_size);
			$first: true;

			@each $key in list-reverse(map-keys($_stack)) {
				@if index(map-keys($breakpoints), $key) {
					
					@if $first {
						
						font-size: px-to-rem(map-get($_stack, $key));
						$first: false;
						
					} @else {
						
						@include media('<'+$key) {
							
							font-size: px-to-rem(map-get($_stack, $key));
							
						}
						
					}
					
				}
			}
			
		} @else {
			
			font-size: px-to-rem(map-get($font-size, $_size));
			
		}
		
	} @else {
		
		font-size: px-to-rem($_size);
		
	}
	
}



//---------------------------------------------------------------
// Set the gutter width independently of the default
//---------------------------------------------------------------
@mixin gutter-width($_gutter-width) {
	
	margin-bottom: ($line-break * 2) - $_gutter-width;
	margin-left: $_gutter-width / -2;
	margin-right: $_gutter-width / -2;
							
	&:last-child {
		margin-bottom: $_gutter-width * -1;
	}
	
	+ .row {
		margin-bottom: $_gutter-width - ($line-break * 2);
	}
				
	[class*=col-],
	.col {
		padding: 0 ($_gutter-width / 2) ($_gutter-width);
	}
	
}



//---------------------------------------------------------------
// Sets margins relative to root em
//---------------------------------------------------------------

@mixin margin($_margins: $lineHeight auto) {
	
	$_result: ();

	@each $_margin in $_margins {
		
		@if $_margin == 'auto' {
			
			$_result: append($_result, auto);
			
		} @else if type-of($_margin) == string and index(map-keys($spacing), $_margin) {
			
			$_result: append($_result, map-get($spacing, $_margin));
			
		} @else if type-of($_margin) == string and str-slice($_margin, 1, 1) == '-' and index(map-keys($spacing), str-slice($_margin, 2)) {
			
			$_result: append($_result, map-get($spacing, str-slice($_margin, 2)) * -1);
			
		} @else {
			
			$_result: append($_result, $_margin);
		}
		
		
	}

	margin: $_result;

	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}
	
}



//---------------------------------------------------------------
// Sets margins relative to root em
//---------------------------------------------------------------

@mixin padding($_paddings: $lineHeight auto) {
	
	$_result: ();

	@each $_padding in $_paddings {
		
		@if type-of($_padding) == string and index(map-keys($spacing), $_padding) {
			
			$_result: append($_result, map-get($spacing, $_padding));
			
		} @else if type-of($_padding) == string and str-slice($_padding, 1, 1) == '-' and index(map-keys($spacing), str-slice($_padding, 2)) {
			
			$_result: append($_result, map-get($spacing, str-slice($_padding, 2)) * -1);
			
		} @else {
			
			$_result: append($_result, $_padding);
			
		}
	}

	padding: $_result;
	
}



//---------------------------------------------------------------
// Sets transition based on defaults
//---------------------------------------------------------------

@mixin transition($_properties...) {
	
	$_result: ();
	
	@if length($_properties) == 0 {
		$_properties: (
			'normal all'
		);
	}
	
	@for $i from 1 through length($_properties) {
		 
		$_property: nth($_properties, $i);
		$_subResult: ();
		
		@if type-of($_property) == string {
			$_property: explode($_property, ' ');
		}
		
		@each $_sub-property in $_property {
		
			@if type-of($_sub-property) == string and index(map-keys($transition-speed), $_sub-property) {
				
				$_subResult: append($_subResult, map-get($transition-speed, $_sub-property));
				
			} @else {
				
				$_subResult: append($_subResult, unquote($_sub-property));
				
			}
		
		}
		
		$_result: append($_result, $_subResult, comma);
	}

	transition: $_result;
	
}



//---------------------------------------------------------------
// Reverse the order of a list
//---------------------------------------------------------------

@function list-reverse($_list) {
	
	$_result: null;
	
	@if type-of($_list) == 'list' {
		$_list-reversed: ();
		
		@for $i from length($_list) through 1 {
			$_list-reversed: append(
				$_list-reversed, 
				nth($_list, $i)
			);
		}
		
		@if type-of($_list-reversed) == 'list' {
			$_result: $_list-reversed;
		} @else {
			@warn 'There was an error reversing the order of '#{$_list}'';
		}
	} @else {
		@warn ''#{$_list}' is not a valid list';
	}
	
	@return $_result;
	
}



//---------------------------------------------------------------
// Reverse the order of a map
//---------------------------------------------------------------

@function map-reverse($_map) {
	
	$_result: null;

	@if type-of($_map) == 'map' {
		$keys: map-keys($_map);
		$_map-reversed: ();
		
		@for $i from length($keys) through 1 {
			$_map-reversed: map-merge(
				$_map-reversed,
				(nth($keys, $i): map-get($_map, nth($keys, $i)))
			);
		}

		@if type-of($_map-reversed) == 'map' {
			$_result: $_map-reversed;
		} @else {
			@warn 'There was an error reversing the order of '#{$_map}'';
		}
	} @else {
		@warn ''#{$_map}' is not a valid map';
	}

	@return $_result;
	
}
