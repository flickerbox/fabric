/// @group Fabric Component Placeholders
/// @access public

%Grid {
	display: flex;
	flex-wrap: wrap;

	@for $i from 1 through $grid-columns {
		$_class: '&.with-#{$i} > div';

		@if $i == $grid-columns {
			$_class: '> div, #{$_class}';
		}

		#{$_class} {
			width: 100% / $i;
		}
	}

	@each $_grid-breakpoint in map-keys($grid-breakpoints) {
		$_breakpoints: map-get($grid-breakpoints, $_grid-breakpoint);
		$_grid-class: '.has-#{camelize($_grid-breakpoint)}Breakpoints';

		@if length($_breakpoints) > 1 {
			$_breakpoints: list-reverse($_breakpoints);
		}

		@if $_grid-breakpoint == 'normal' {
			$_grid-class: '';
		}

		@for $i from 1 through length($_breakpoints) {
			$_breakpoint: nth($_breakpoints, $i);

			@if $i == 1 {
				@for $_columns from 1 through $grid-columns {
					@for $j from 1 through $_columns {
						$_grid-item-class: '> .is-#{$j}';

						@if $j == 1 {
							$_grid-item-class: '> div, #{$_grid-item-class}';
						}

						&#{$_grid-class}.with-#{$_columns} #{$_grid-item-class} {
							width: 100% * ($j / $_columns);
						}
					}
				}
			} @else {
				@include media('<#{$_breakpoint}') {
					@for $_columns from 1 through $grid-columns {
						@for $j from 1 through $_columns {

							@if $j == 1 {

								&#{$_grid-class}.with-#{$_columns}--#{camelize($_breakpoint)} > div {
									width: 100% * ($j / $_columns);
								}

							}

							&#{$_grid-class}.with-#{$_columns} > .is-#{$j}--#{camelize($_breakpoint)} {
								width: 100% * ($j / $_columns);
							}

						}
					}
				}
			}
		}
	}

	@each $key in map-keys($grid-gaps) {
		$_gap: get-grid-gap($key);
		$_grid-class: '&.has-#{camelize($key)}Gaps';

		@if $key == 'normal' {
			$_grid-class: '&, #{$_grid-class}';
		}

		#{$_grid-class} {
			margin: 0 (-$_gap / 2) (-$_gap);
			width: calc(100% + #{$_gap});

			> %GridItem {
				padding: 0 ($_gap / 2) ($_gap);
			}
		}
	}
}

%GridItem {
	flex-shrink: 0;
	position: relative;
}
