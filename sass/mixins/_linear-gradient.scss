/// Multi color gradients
/// @name linear-gradient
/// @group Fabric Mixins
/// @author Cody Baker
/// @access public
/// @param {string} $_direction [] - Set the gradient direction
/// @param {map} $_color-stops [''] - Set the color stop values
/// @require {function} is-direction
/// @require {function} SassCore::length
/// @require {function} SassCore::nth
/// @require {function} SassCore::explode
/// @require {function} SassCore::unquote
/// @require {function} SassCore::inspect
/// @require {function} SassCore::inspect
/// @require {function} SassCore::index
/// @require {function} SassCore::map-keys
/// @require {function} SassCore::append

@mixin linear-gradient($_direction, $_color-stops...) {
	// Direction has been omitted and happens to be a color-stop
	@if is-direction($_direction) == false {
		$_color-stops: $_direction, $_color-stops;
		$_direction: 180deg;
	}

	$_result: ();

	@for $i from 1 through length($_color-stops) {

		$_color-stop: nth($_color-stops, $i);
		$_subResult: ();

		@if type-of($_color-stop) == string {
			$_color-stop: explode($_color-stop, ' ');
		}

		@each $_sub-color-stop in $_color-stop {

			$_sub-color-stop: unquote(inspect($_sub-color-stop));

			@if type-of(inspect($_sub-color-stop)) == string and index(map-keys($colors), inspect($_sub-color-stop)) {

				$_subResult: append($_subResult, map-get($colors, inspect($_sub-color-stop)));

			} @else {

				$_subResult: append($_subResult, unquote(inspect($_sub-color-stop)));

			}

		}

		$_result: append($_result, $_subResult, comma);
	}

	background-color: nth(nth($_result, 1), 1);
	background-image: -webkit-linear-gradient(legacy-direction($_direction), $_result);
	background-image: linear-gradient($_direction, $_result);
}
