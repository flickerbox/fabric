//---------------------------------------------------------
// White Space
//
// Accepts a space delimited list of units, just like margin or padding and
// applies the same list to the element with unitless units multiplied by 
// the default line height and font size
//
// e.g. 1 auto -> 1.5em auto
//---------------------------------------------------------
@mixin white-space($margins: $line-height auto) {
	$result: ();
	
	@each $margin in $margins {
		@if $margin == "auto" {
			$result: append($result, auto);
		} @else if unitless($margin) {
			$result: append($result, $margin * remove-unit($line-height) * $font-size);
		} @else {
			$result: append($result, $margin);
		}
	}
	
	margin: $result;
	
	&:first-child {
		margin-top: 0;
	}
	
	&:last-child {
		margin-bottom: 0;
	}
}


//---------------------------------------------------------
// Responsive
//
// Responsive takes a base value in rems(default) or px.
// When the value can be fluid, it is stated in vw units.
// When the viewport is larger than the default-base-width, the property is the base.
// When the responsive value equals the $min value, the $min value is used at a calculated breakpoint.
//---------------------------------------------------------
@mixin responsive($property, $base, $min:0) {
	$default-base-width: 1000px !default;
	$default-em-size: 16px !default;

	// strip the units out
	$default-em-size: parse-num($default-em-size);
	$default-base-width: parse-num($default-base-width);

	// strip the min because its unit is meaningless compared to the $base:
	$min: parse-num($min);

	// make sure the given values are only px or ems or rems:
	@if (unitless($base)) {
		// all is good
	} @else if unit($base) == "rem" {
		// just strip the rem out of there as well
		$base: parse-num($base);
	} @else if unit($base) == "px" {
		// switch the values to ems:
		$base: parse-num($base);
		$base: $base / $default-em-size;
		$min: $min / $default-em-size;
	} @else {
		 @error "$base value unit must be either NULL, rem, or px";
	}


	// first figure out if there is a min value. If not, make it half the base, but at least 1em
	@if $min == 0 {
		$min: $base / 2;
		@if ($property == font-size) {
			@if $min < 1 {
				$min: 1;
			}
		}
	}
	// convert the base to vw:
	$base--vw: ( ( $base * $default-em-size ) / $default-base-width ) * 100;

	// from the base--vw, we can figure out where the min breakpoint will occur:
	$min-breakpoint: ( $min * $default-em-size ) / ($base--vw / 100 );

	// now we set the responsive value:
	#{$property}: $base * 1em; // default if < IE9
	#{$property}: $base--vw * 1vw;

	// on viewports *above* the default-base-width, we "hardcode" the original em value:
	@media only screen and (min-width: (($default-base-width + 1) * 1px) ) {
		#{$property}: $base * 1rem;
	}

	// at the calculated min-breakpoint, we use the min em value:
	@media only screen and (max-width: ($min-breakpoint * 1px) ) {
		#{$property}: $min * 1rem;
	}
}



@mixin transition($speed: "normal", $property: all) {
	$seconds: 0.4s;
	
	@if $speed == "slow" {
		$seconds: 0.6s;
	} @else if $speed == "fast" {
		$seconds: 0.2s;
	}
	
	transition: $seconds $property;
}