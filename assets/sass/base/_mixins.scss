//---------------------------------------------------------------
// Sets color from color map
//---------------------------------------------------------------

@mixin color($_color, $_alpha: 1) {
	
	color: get-color($_color, $_alpha);

}



//---------------------------------------------------------------
// Sets font responsively
//---------------------------------------------------------------

@mixin font($_value, $_size: '') {
	
	@include font-size($_value, $_size);
	@include font-weight($_value, $_size);
	@include line-height($_value, $_size);
	
}



//---------------------------------------------------------------
// Sets font size responsively
//---------------------------------------------------------------

@mixin font-size($_value, $_size: '') {
	
	@if type-of($_value) == string and index(map-keys($font-size), $_value) {
		
		@if type-of(map-get($font-size, $_value)) == 'map' {
			
			@if $_size != '' {
				
				font-size: map-get(map-get($font-size, $_value), $_size);
				
			} @else {
			
				$_stack: map-get($font-size, $_value);
				$first: true;
	
				@each $key in list-reverse(map-keys($_stack)) {
					@if index(map-keys($breakpoints), $key) {
						
						@if $first {
							
							font-size: map-get($_stack, $key);
							$first: false;
							
						} @else {
							
							@include media('<'+$key) {
								
								font-size: map-get($_stack, $key);
								
							}
							
						}
						
					}
				}
			
			}
			
		} @else {
			
			font-size: map-get($font-size, $_value);
			
		}
		
	} @else {
		
		font-size: $_value;
		
	}
	
}



//---------------------------------------------------------------
// Sets font weight responsively
//---------------------------------------------------------------

@mixin font-weight($_value, $_size: '') {
	
	@if type-of($_value) == string and index(map-keys($font-weight), $_value) {
		
		@if type-of(map-get($font-weight, $_value)) == 'map' {
			
			@if $_size != '' {
				
				font-weight: map-get(map-get($font-weight, $_value), $_size);
				
			} @else {
			
				$_stack: map-get($font-weight, $_value);
				$first: true;
	
				@each $key in list-reverse(map-keys($_stack)) {
					@if index(map-keys($breakpoints), $key) {
						
						@if $first {
							
							font-weight: map-get($_stack, $key);
							$first: false;
							
						} @else {
							
							@include media('<'+$key) {
								
								font-weight: map-get($_stack, $key);
								
							}
							
						}
						
					}
				}
			
			}
			
		} @else {
			
			font-weight: map-get($font-weight, $_value);
			
		}
		
	} @else {
		
		font-weight: $_value;
		
	}
	
}



//---------------------------------------------------------------
// Sets line height responsively
//---------------------------------------------------------------

@mixin line-height($_value, $_size: '') {
	
	@if type-of($_value) == string and index(map-keys($line-height), $_value) {
		
		@if type-of(map-get($line-height, $_value)) == 'map' {
			
			@if $_size != '' {
				
				line-height: map-get(map-get($line-height, $_value), $_size);
				
			} @else {
				
				$_stack: map-get($line-height, $_value);
				$first: true;
	
				@each $key in list-reverse(map-keys($_stack)) {
					@if index(map-keys($breakpoints), $key) {
						
						@if $first {
							
							line-height: map-get($_stack, $key);
							$first: false;
							
						} @else {
							
							@include media('<'+$key) {
								
								line-height: map-get($_stack, $key);
								
							}
							
						}
						
					}
				}
			
			}
			
		} @else {
			
			line-height: map-get($line-height, $_value);
			
		}
		
	} @else {
		
		line-height: $_value;
		
	}
	
}



//---------------------------------------------------------------
// Set the gutter width independently of the default
//---------------------------------------------------------------
@mixin gutter-width($_gutter-width) {
	
	margin-bottom: ($line-break * 2) - $_gutter-width;
	margin-left: $_gutter-width / -2;
	margin-right: $_gutter-width / -2;
							
	&:last-child {
		margin-bottom: $_gutter-width * -1;
	}
	
	+ .row {
		margin-bottom: $_gutter-width - ($line-break * 2);
	}
				
	[class*=col-],
	.col {
		padding: 0 ($_gutter-width / 2) ($_gutter-width);
	}
	
}



//---------------------------------------------------------------
// Sets margins relative to root em
//---------------------------------------------------------------

@mixin margin($_margins: $line-height auto) {
	
	$_result: ();

	@each $_margin in $_margins {
		
		@if $_margin == 'auto' {
			
			$_result: append($_result, auto);
			
		} @else if type-of($_margin) == string and index(map-keys($spacing), $_margin) {
			
			$_result: append($_result, map-get($spacing, $_margin));
			
		} @else if type-of($_margin) == string and str-slice($_margin, 1, 1) == '-' and index(map-keys($spacing), str-slice($_margin, 2)) {
			
			$_result: append($_result, map-get($spacing, str-slice($_margin, 2)) * -1);
			
		} @else {
			
			$_result: append($_result, $_margin);
		}
		
		
	}

	margin: $_result;

	&:first-child {
		margin-top: 0;
	}

	&:last-child {
		margin-bottom: 0;
	}
	
}



//---------------------------------------------------------------
// Sets margins relative to root em
//---------------------------------------------------------------

@mixin padding($_paddings: $line-height auto) {
	
	$_result: ();

	@each $_padding in $_paddings {
		
		@if type-of($_padding) == string and index(map-keys($spacing), $_padding) {
			
			$_result: append($_result, map-get($spacing, $_padding));
			
		} @else if type-of($_padding) == string and str-slice($_padding, 1, 1) == '-' and index(map-keys($spacing), str-slice($_padding, 2)) {
			
			$_result: append($_result, map-get($spacing, str-slice($_padding, 2)) * -1);
			
		} @else {
			
			$_result: append($_result, $_padding);
			
		}
	}

	padding: $_result;
	
}



//---------------------------------------------------------------
// Sets transition based on defaults
//---------------------------------------------------------------

@mixin transition($_properties...) {
	
	$_result: ();
	
	@if length($_properties) == 0 {
		$_properties: (
			'normal all'
		);
	}
	
	@for $i from 1 through length($_properties) {
		 
		$_property: nth($_properties, $i);
		$_subResult: ();
		
		@if type-of($_property) == string {
			$_property: explode($_property, ' ');
		}
		
		@each $_sub-property in $_property {
		
			@if type-of($_sub-property) == string and index(map-keys($transition-speed), $_sub-property) {
				
				$_subResult: append($_subResult, map-get($transition-speed, $_sub-property));
				
			} @else {
				
				$_subResult: append($_subResult, unquote(inspect($_sub-property)));
				
			}
		
		}
		
		$_result: append($_result, $_subResult, comma);
	}

	transition: $_result;
	
}


//---------------------------------------------------------------
// Multi color gradients
//---------------------------------------------------------------
@mixin linear-gradient($_direction, $_color-stops...) {
	// Direction has been omitted and happens to be a color-stop
	@if is-direction($_direction) == false {
		$_color-stops: $_direction, $_color-stops;
		$_direction: 180deg;
	}
	
	$_result: ();
	
	@for $i from 1 through length($_color-stops) {
		 
		$_color-stop: nth($_color-stops, $i);
		$_subResult: ();
		
		@if type-of($_color-stop) == string {
			$_color-stop: explode($_color-stop, ' ');
		}
		
		@each $_sub-color-stop in $_color-stop {
			
			$_sub-color-stop: unquote(inspect($_sub-color-stop));
			
			@if type-of(inspect($_sub-color-stop)) == string and index(map-keys($colors), inspect($_sub-color-stop)) {
				
				$_subResult: append($_subResult, map-get($colors, inspect($_sub-color-stop)));
				
			} @else {
				
				$_subResult: append($_subResult, unquote(inspect($_sub-color-stop)));
				
			}
		
		}
		
		$_result: append($_result, $_subResult, comma);
	}
	
	background: nth(nth($_result, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($_direction), $_result);
	background: linear-gradient($_direction, $_result);
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}


//---------------------------------------------------------------
// Make a triangle
//---------------------------------------------------------------

@mixin triangle($position, $color: currentcolor, $size: 1em, $angle: 1.25) {

	// make sure we get a valid position
	@if not index(top right bottom left, $position) {
		@error "Direction must be either top, right, bottom or left.";
	}

	// base styles
	width: 0;
	height: 0;
	z-index: 10;

	// add content for use in pseudo elements
	content: '';

	// create the triangle direction by adding border to the opposite position
	border-#{opposite-position($position)}: ($size * $angle) solid $color;

	// set the transparent sides
	$transparent-sides: $size solid transparent;

	@if $position == top or $position == bottom {
		border-left:   $transparent-sides;
		border-right:  $transparent-sides;
	}
	@else if $position == right or $position == left {
		border-bottom: $transparent-sides;
		border-top:    $transparent-sides;
	}
}




//---------------------------------------------------------------
// Set drop shadow based on default
//---------------------------------------------------------------

@mixin drop-shadow($_color: 'black', $_elevation: 'medium', $_inset: false) {
	
	$_box_shadow: ();

	@if($_inset) {
		$_inset: 'inset';
	} @else {
		$_inset: '';
	}
	
	@if type-of($_color) == string and index(map-keys($colors), $_color) {

		$_color: map-get($colors, $_color);

	}
	
	@if type-of($_elevation) == string and index(map-keys($drop-shadow-elevations), $_elevation) {
		
		$_alpha: map-get($drop-shadow-alpha, $_elevation);
		$_shadow_list: map-get($drop-shadow-elevations, $_elevation);
		
		@each $_shadow in $_shadow_list {
			$_this_color: rgba($_color, ($_alpha / index($_shadow_list, $_shadow)));
			$_box_shadow: append($_box_shadow, unquote('#{$_this_color} #{$_shadow} #{$_inset}'), 'comma');
		}

	}
	
	box-shadow: $_box_shadow;
	
}
