//-----------------------------------------------------------------------
// Mixins
//-----------------------------------------------------------------------
@mixin grid($_gutter-width: $gutter-width, $_grid-width: $grid-width, $_column-prefix: 'Column', $_column-offset-prefix: 'ColumnOffset') {
	@include grid-container($_gutter-width);
	
	@if $_gutter-width != $gutter-width or $_column-prefix != 'Column' {
		> .#{$_column-prefix},
		> [class^='#{$_column-prefix}--'],
		> [class*=' #{$_column-prefix}--'] {
			@include grid-item($_gutter-width);
		}
	}
	
	@if $_grid-width != $grid-width {
		@for $i from 1 through $_grid-width {
			> .#{$_column-prefix}--#{$i} {
				width: 100% * ($i / $_grid-width);
			}
		
			> .#{$_column-offset-prefix}--#{$i - 1} {
				margin-left: 100% * (($i - 1) / $_grid-width);
			}
		}
		
		@each $_breakpoint in map-keys(map-reverse($breakpoints)) {
			@include media(unquote('<#{$_breakpoint}')) {
				@for $i from 1 through $_grid-width {
					> .#{$_column-prefix}--#{camelize($_breakpoint)}-#{$i} {
						width: 100% * ($i / $_grid-width);
					}
		
					> .#{$_column-offset-prefix}--#{camelize($_breakpoint)}-#{$i - 1} {
						margin-left: 100% * (($i - 1) / $_grid-width);
					}
				}
			}
		}
	}
}

@mixin grid-container($_gutter-width: $gutter-width) {
	align-content: flex-start;
	align-items: flex-start;
	display: flex;
	flex-wrap: wrap;
	margin: 0 ($_gutter-width * -0.5) ($_gutter-width * -1);
	width: calc(100% + #{$_gutter-width});
}

@mixin grid-item($_gutter-width: $gutter-width) {
	padding: 0 ($_gutter-width * 0.5) ($_gutter-width);
	position: relative;
}


//-----------------------------------------------------------------------
// Classes
//-----------------------------------------------------------------------
.Row {
	@include grid-container();
}

.Column,
[class^='.Column--'],
[class*=' .Column--'] {
	@include grid-item();
}

@for $i from 1 through $grid-width {
	.Column--#{$i} {
		width: 100% * ($i / $grid-width);
	}

	.ColumnOffset--#{$i - 1} {
		margin-left: 100% * (($i - 1) / $grid-width);
	}
}

@each $breakpoint in map-keys(map-reverse($breakpoints)) {
	@include media(unquote('<#{$breakpoint}')) {
		@for $i from 1 through $grid-width {
			.Column--#{camelize($breakpoint)}-#{$i} {
				width: 100% * ($i / $grid-width);
			}

			.ColumnOffset--#{camelize($breakpoint)}-#{$i - 1} {
				margin-left: 100% * (($i - 1) / $grid-width);
			}
		}
	}
}